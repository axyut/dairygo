package pages

import "github.com/axyut/dairygo/internal/types"
import "strconv"
import "github.com/axyut/dairygo/client/components"

templ TransactionPage(soldTrans []types.Transaction, auds []types.Audience, goods []types.Good) {
    @pageStyles()

    <div  hx-ext="response-targets">
            <form >
        <div class="trans_nav">
                // <button class="open-button" onclick={downloadTrans()}>Download</button>
                <select 
                    name="type" 
                    hx-trigger="change"
                    hx-post="/transaction/refresh"
                    hx-swap="innerHTML"
                    hx-target="#transaction_here"
                    hx-target-error="#error"
                    hx-indicator=".progress"
                >
                    <option value="sold">Sold</option>
                    <option value="bought">Bought</option>
                    <option value="production">Production</option>
                </select>
                <select name="date"
                    hx-trigger="change"
                    hx-post="/transaction/refresh"
                    hx-swap="innerHTML"
                    hx-target-error="#error"
                    hx-target="#transaction_here"
                    hx-indicator=".progress"
                >
                    <option value="today">Today</option>
                    <option value="yesterday">Yesterday</option>
                    <option value="lastweek">Last 7 Days</option>
                    <option value="thismonth">This Month</option>
                    <option value="lastmonth">Last Month</option>
                    <option value="alltime">All time</option>
                </select>
                <select name="aud_id_filter" 
                        hx-trigger="change"
                        hx-post="/transaction/refresh" 
                        hx-swap="innerHTML" 
                        hx-target="#transaction_here" 
                        hx-indicator=".progress"
                        hx-target-error="#error"
                    >
                        <option value="all">Peoples</option>
                        @audIDSelect(auds)
                </select>
                <select name="good_id_filter" 
                        hx-trigger="change"
                        hx-post="/transaction/refresh" 
                        hx-swap="innerHTML" 
                        hx-target="#transaction_here" 
                        hx-indicator=".progress"
                        hx-target-error="#error"
                    >
                        <option value="all">Goods</option>
                        @goodIDSelect(goods)
                </select>
                
                // <button class="open-button" 
                //     type="submit"
                //     hx-post="/transaction/refresh"
                //     hx-swap="innerHTML"
                //     hx-target="#transaction_here"
                //     hx-indicator=".progress"
                // >Search</button>

                <select name="payment"
                    hx-trigger="change"
                    hx-post="/transaction/refresh"
                    hx-swap="innerHTML"
                    hx-target="#transaction_here"
                    hx-target-error="#error"
                    hx-indicator=".progress"
                >
                    <option value="all">Payment</option>
                    <option value="paid">Paid</option>
                    <option value="unpaid">Pending</option>
                </select>
        </div>
            </form>

        <div id="transaction_here" class="divContainer">
           @Sold(soldTrans)
        </div>
    </div>
}

templ Sold(soldTrans []types.Transaction){
    <div>
        <table class="simpleTable">
            <tr>
                <th>Name</th>
                <th>Quantity</th>
                <th>Price</th>
                <th>Sold To</th>
                <th>Payment</th>
                <th>Time</th>
                <th>Action</th>
            </tr>
            for i:=0; i<len(soldTrans); i++{
                if i == 0{
                    <tr id="date">
                        <td  colspan="7">{soldTrans[i].CreationTime.Time().Format("Monday Jan 2")}</td>
                    </tr>
                } else if soldTrans[i].CreationTime.Time().Day() != soldTrans[i-1].CreationTime.Time().Day(){
                    <tr id="date">
                            <td  colspan="7">{soldTrans[i].CreationTime.Time().Format("Monday Jan 2")}</td>
                    </tr>
                }

                    @sRow(soldTrans[i])

                if i+1 < len(soldTrans) && soldTrans[i].CreationTime.Time().Day() != soldTrans[i+1].CreationTime.Time().Day(){
                    <tr id="break"><td  colspan="7" ></td></tr>
                } else if i+1 == len(soldTrans){
                    <tr id="break"><td  colspan="7" ></td></tr>
                }
            }
        </table>
    </div>
}

templ audIDSelect(auds []types.Audience){
    for i:=0; i<len(auds); i++{
        <option value={auds[i].ID.Hex()}>{auds[i].Name}</option>
    }
}

templ goodIDSelect(goods []types.Good){
    for i:=0; i<len(goods); i++{
        <option value={goods[i].ID.Hex()}>{goods[i].Name}</option>
    }
}

templ CheckboxTemplate(id string, payment bool){
    if payment{
            <input
                hx-trigger="click"
                hx-patch={"/transaction?id="+id+"&payment="+strconv.FormatBool(!payment)}
                hx-target={"#payment_"+id}
                hx-target-error="#error"
                hx-swap="innerHTML"
                class="trans_check" 
                type="checkbox" 
            checked />
        } else {
                <input
                    hx-trigger="click"
                    hx-patch={"/transaction?id="+id+"&payment="+strconv.FormatBool(!payment)}
                    hx-target={"#payment_"+id}
                    hx-target-error="#error"
                    hx-swap="innerHTML"
                    class="trans_check" 
                    type="checkbox" 
                />
        }
}

templ CheckboxBoolPayment(id string, payment bool){
    @CheckboxTemplate(id, payment)
    if payment{
        @components.SuccessToast("Payment Done. Congratulations!")
    } else {
        @components.DangerToast("Payment Removed. Please pay soon!")
    }
}

templ sRow(soldTrans types.Transaction){
    <tr id={"soldTrans_"+soldTrans.ID.Hex()} hx-ext="response-targets">
        <td>
            {soldTrans.GoodName}
        </td>
        <td>{strconv.FormatFloat(soldTrans.Quantity, 'f', -1, 64) +" " + soldTrans.GoodUnit}</td>
        <td>{strconv.FormatFloat(soldTrans.Price, 'f', -1, 64) }</td>
        <td>{soldTrans.SoldTo}</td>
        <td id={"payment_"+soldTrans.ID.Hex()}>
            @CheckboxTemplate(soldTrans.ID.Hex(), soldTrans.Payment)
        </td>
        <td>{soldTrans.CreationTime.Time().Format("3:04 pm")}</td>
        <td>
            <button
                if soldTrans.Payment{
                    hx-confirm={"This transaction will be deleted. "}
                } else {
                    hx-confirm={soldTrans.SoldTo +" has not payed. This transaction will be deleted. "}
                }
                hx-delete={"/transaction?id="+soldTrans.ID.Hex()}
                hx-target={"#soldTrans_"+soldTrans.ID.Hex()}
                hx-target-error="#error"
                hx-swap="outerHTML"
                class="red simpleButton"
            >Del
            </button>
      </td>
    </tr>
}

templ pageStyles(){
    <style>


        #search {
            padding: 5px;
            border-radius: 5px;
            border: solid 1px black;
            width: 100%;
            max-width: 250px;
        }
    </style>
}

script downloadTrans(){
        var doc = new jspdf.jsPDF('p', 'pt', 'a4');

        doc.html(document.querySelector('#transaction_here'), {
            callback: function (doc) {
                doc.save('Transaction.pdf');
            },
            margin: [0,0,0,0],
            x: 32,
            y: 32,
        });
        // doc.text("Hello world!", 10, 10);
        // doc.save("a4.pdf");
}

templ bRow(boughtTrans types.Transaction){
    <tr id={"boughtTrans_"+boughtTrans.ID.Hex()} hx-ext="response-targets">
        <td>{boughtTrans.GoodName}</td>
        <td>{strconv.FormatFloat(boughtTrans.Quantity, 'f', -1, 64) +" "+ boughtTrans.GoodUnit}</td>
        <td>{strconv.FormatFloat(boughtTrans.Price, 'f', -1, 64) }</td>
        <td>{boughtTrans.BoughtFrom}</td>
        <td id={"payment_"+boughtTrans.ID.Hex()}>
            @CheckboxTemplate(boughtTrans.ID.Hex(), boughtTrans.Payment)
        </td>
        <td>{boughtTrans.CreationTime.Time().Format("3:04 pm")}</td>
        <td>
            <button
                if boughtTrans.Payment{
                    hx-confirm={"This transaction will be deleted. "}
                } else {
                    hx-confirm={"You have not paid for this transaction. This transaction will be deleted. "}
                }
                hx-delete={"/transaction?id="+boughtTrans.ID.Hex()}
                hx-target={"#boughtTrans_"+boughtTrans.ID.Hex()}
                hx-target-error="#error"
                hx-swap="outerHTML"
                class="red simpleButton"
            >Del
            </button>
      </td>
    </tr>
}

templ Bought(boughtTrans []types.Transaction) {
	<div>
        
		<table class="simpleTable">
			<tr>
				<th>Name</th>
				<th>Quantity</th>
				<th>Price</th>
				<th>Bought From</th>
				<th>Payment</th>
				<th>Time</th>
                <th>Action</th>
			</tr>
			for i:=0; i<len(boughtTrans); i++{
                if i == 0{
                    <tr id="date">
                        <td  colspan="7">{boughtTrans[i].CreationTime.Time().Format("Monday Jan 2")}</td>
                    </tr>
                } else if boughtTrans[i].CreationTime.Time().Day() != boughtTrans[i-1].CreationTime.Time().Day(){
                    <tr id="date">
                            <td  colspan="7"> {boughtTrans[i].CreationTime.Time().Format("Monday Jan 2")}</td>
                    </tr>
                }

                    @bRow(boughtTrans[i])

                if i+1 < len(boughtTrans) && boughtTrans[i].CreationTime.Time().Day() != boughtTrans[i+1].CreationTime.Time().Day(){
                    <tr id="break"><td  colspan="7" ></td></tr>
                } else if i+1 == len(boughtTrans){
                    <tr id="break"><td  colspan="7" ></td></tr>
                }
            }
		</table>
	</div>
}


templ Production(prods []types.Production) {
    <div>
        <table class="simpleTable">
            <tr>
                <th colspan="2">Produced</th>
                <th colspan="2">From</th>
                <th>Time</th>
                <th>Action</th>
            </tr>
            for i:=0; i<len(prods); i++{
                if i == 0{
                    <tr id="date">
                        <td colspan="6">{prods[i].CreationTime.Time().Format("Monday Jan 2")}</td>

                    </tr>
                } else if prods[i].CreationTime.Time().Day() != prods[i-1].CreationTime.Time().Day(){
                    <tr id="date">
                            <td colspan="6">{prods[i].CreationTime.Time().Format("Monday Jan 2")}</td>
                    </tr>
                }

                    @iRow(prods[i])

                if i+1 < len(prods) && prods[i].CreationTime.Time().Day() != prods[i+1].CreationTime.Time().Day(){
                    <tr id="break"><td  colspan="6" ></td></tr>
                } else if i+1 == len(prods){
                    <tr id="break"><td  colspan="6" ></td></tr>
                }
            }
     
        </table>
    </div>
}

templ iRow(prod types.Production){
    <tr id={"prod_"+prod.ID.Hex()} hx-ext="response-targets">
        <td>
            {strconv.FormatFloat(prod.ProducedQuantity, 'f', -1, 64)} 
            {prod.ProducedGoodUnit}
             of 
            {prod.ProducedGoodName} 
        </td>
        <td>
            Rs. {strconv.FormatFloat(prod.ProducedPrice, 'f', -1, 64)}
        </td>
        <td>
            {strconv.FormatFloat(prod.ChangeQuantity, 'f', -1, 64)} 
            {prod.ChangeGoodUnit}
             of 
            {prod.ChangeGoodName} 
        </td>
        <td>
            Rs. {strconv.FormatFloat(prod.ChangePrice, 'f', -1, 64)}
        </td>
        <td>{prod.CreationTime.Time().Format("3:04 pm")}</td>
        <td>
            <button
                hx-confirm={"This production will be deleted. "}
                hx-delete={"/production?id="+prod.ID.Hex()}
                hx-target={"#prod_"+prod.ID.Hex()}
                hx-target-error="#error"
                hx-swap="outerHTML"
                class="red simpleButton"
            >Del
            </button>
      </td>
    </tr>
}